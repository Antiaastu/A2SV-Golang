package usecases

import (
	"Task7/domain"
	"Task7/dto"
	"Task7/infrastructure"
	"context"
	"errors"
)

type UserRepository interface {
	Create(ctx context.Context, user domain.User) error
	FindByUsername(ctx context.Context, username string) (domain.User, error)
}

type UserUsecase struct {
	repo UserRepository
}

func NewUserUsecase(r UserRepository) *UserUsecase {
	return &UserUsecase{repo: r}
}

func (u *UserUsecase) Register(ctx context.Context, in dto.RegisterUserRequest) error {
	if in.Username == "" || in.Password == "" {
		return errors.New("username and password are required")
	}
	hashed, _ := infrastructure.HashPassword(in.Password)
	user := domain.User{
		ID:       "", // ID should be generated by the database
		Username: in.Username,
		Password: hashed,
		Role:     in.Role,
	}
	if user.Role == "" {
		user.Role = "user" // default role
	}
	return u.repo.Create(ctx, user)
}

func (u *UserUsecase) Login(ctx context.Context, in dto.LoginUserRequest) (string, error) {
	// check if the fields are valid
	user, err := u.repo.FindByUsername(ctx, in.Username)
	if err != nil {
		return "", errors.New("invalid credentials")
	}
	if err := infrastructure.ComparePassword(user.Password, in.Password); err != nil {
		return "", errors.New("invalid credentials")
	}
	return infrastructure.GenerateToken(user.Username, user.Role)
}
